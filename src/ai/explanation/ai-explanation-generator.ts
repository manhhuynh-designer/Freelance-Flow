/**
 * Phase 3: AI Explanation System
 * Provides detailed explanations for AI predictions and insights
 */

import type { PredictionContext, AIBusinessInsight, AITaskPrediction } from '../context/prediction-context-types';

export interface AIExplanation {
  id: string;
  type: 'prediction' | 'insight' | 'recommendation';
  title: string;
  summary: string;
  detailedExplanation: string;
  keyFactors: Array<{
    factor: string;
    weight: number;
    description: string;
    evidence: string[];
  }>;
  confidenceBreakdown: {
    dataQuality: number;
    patternStrength: number;
    historicalAccuracy: number;
    contextRelevance: number;
    overall: number;
  };
  methodology: {
    analysisType: string;
    dataPoints: string[];
    algorithms: string[];
    assumptions: string[];
  };
  limitations: string[];
  alternativeScenarios: Array<{
    scenario: string;
    probability: number;
    impact: string;
  }>;
  userActions: Array<{
    action: string;
    difficulty: 'low' | 'medium' | 'high';
    timeEstimate: string;
    expectedImpact: string;
  }>;
  relatedInsights: string[];
  createdAt: Date;
  language: 'en' | 'vi';
}

export class AIExplanationGenerator {
  private static readonly CONFIDENCE_THRESHOLDS = {
    high: 0.8,
    medium: 0.6,
    low: 0.4
  };

  /**
   * Generate detailed explanation for AI business insight
   */
  static generateInsightExplanation(
    insight: AIBusinessInsight,
    context: PredictionContext,
    language: 'en' | 'vi' = 'vi'
  ): AIExplanation {
    const explanationId = `explanation-${insight.category}-${Date.now()}`;
    
    return {
      id: explanationId,
      type: 'insight',
      title: language === 'vi' 
        ? `Gi·∫£i th√≠ch: ${insight.insight.substring(0, 50)}...`
        : `Explanation: ${insight.insight.substring(0, 50)}...`,
      summary: this.generateInsightSummary(insight, language),
      detailedExplanation: this.generateDetailedInsightExplanation(insight, context, language),
      keyFactors: this.extractKeyFactors(insight, context, language),
      confidenceBreakdown: this.calculateConfidenceBreakdown(insight, context),
      methodology: this.describeMethodology(insight, context, language),
      limitations: this.identifyLimitations(insight, context, language),
      alternativeScenarios: this.generateAlternativeScenarios(insight, language),
      userActions: this.generateActionableSteps(insight, language),
      relatedInsights: this.findRelatedInsights(insight, context),
      createdAt: new Date(),
      language
    };
  }

  /**
   * Generate detailed explanation for AI task prediction
   */
  static generatePredictionExplanation(
    prediction: AITaskPrediction,
    context: PredictionContext,
    language: 'en' | 'vi' = 'vi'
  ): AIExplanation {
    const explanationId = `explanation-task-${prediction.taskId}-${Date.now()}`;
    
    return {
      id: explanationId,
      type: 'prediction',
      title: language === 'vi' 
        ? `D·ª± ƒëo√°n ho√†n th√†nh task`
        : `Task Completion Prediction`,
      summary: this.generatePredictionSummary(prediction, language),
      detailedExplanation: this.generateDetailedPredictionExplanation(prediction, context, language),
      keyFactors: this.extractPredictionFactors(prediction, context, language),
      confidenceBreakdown: this.calculatePredictionConfidenceBreakdown(prediction, context),
      methodology: this.describePredictionMethodology(prediction, context, language),
      limitations: this.identifyPredictionLimitations(prediction, context, language),
      alternativeScenarios: this.generatePredictionScenarios(prediction, language),
      userActions: this.generatePredictionActions(prediction, language),
      relatedInsights: [],
      createdAt: new Date(),
      language
    };
  }

  /**
   * Generate insight summary
   */
  private static generateInsightSummary(insight: AIBusinessInsight, language: 'en' | 'vi'): string {
    const dataPointsCount = insight.aiAnalysis.dataPoints.length;
    const confidencePercent = (insight.impact.confidence * 100).toFixed(0);
    const isHighPriority = insight.priority === 'high' || insight.priority === 'urgent';
    
    if (language === 'vi') {
      return `AI ƒë√£ ph√¢n t√≠ch ${dataPointsCount} ngu·ªìn d·ªØ li·ªáu v√† ph√°t hi·ªán insight v·ªÅ ${insight.category} v·ªõi ƒë·ªô tin c·∫≠y ${confidencePercent}%. ${isHighPriority ? 'C·∫ßn h√†nh ƒë·ªông ngay.' : 'Theo d√µi ti·∫øp t·ª•c.'}`;
    }
    
    return `AI analyzed ${dataPointsCount} data sources and identified a ${insight.category} insight with ${confidencePercent}% confidence. ${isHighPriority ? 'Immediate action required.' : 'Continued monitoring recommended.'}`;
  }

  /**
   * Generate detailed insight explanation
   */
  private static generateDetailedInsightExplanation(
    insight: AIBusinessInsight,
    context: PredictionContext,
    language: 'en' | 'vi'
  ): string {
    const dataQuality = context.contextMetadata.dataQuality;
    const taskCount = context.currentState.activeTasks.length;
    
    if (language === 'vi') {
      return `
Insight n√†y ƒë∆∞·ª£c t·∫°o ra th√¥ng qua vi·ªác ph√¢n t√≠ch ${taskCount} tasks hi·ªán t·∫°i v√† d·ªØ li·ªáu l·ªãch s·ª≠ c·ªßa b·∫°n. 

üîç **Quy tr√¨nh ph√¢n t√≠ch:**
1. Thu th·∫≠p d·ªØ li·ªáu t·ª´ ${insight.aiAnalysis.dataPoints.length} ngu·ªìn kh√°c nhau
2. √Åp d·ª•ng thu·∫≠t to√°n machine learning ƒë·ªÉ nh·∫≠n di·ªán patterns
3. So s√°nh v·ªõi d·ªØ li·ªáu l·ªãch s·ª≠ v√† benchmark ng√†nh
4. T√≠nh to√°n ƒë·ªô tin c·∫≠y d·ª±a tr√™n ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu (${(dataQuality * 100).toFixed(0)}%)

üí° **K·∫øt qu·∫£:** ${insight.insight}

üìä **T√°c ƒë·ªông d·ª± ki·∫øn:** T√†i ch√≠nh: ${insight.impact.financial}%, Th·ªùi gian: ${insight.impact.time}%, R·ªßi ro: ${insight.impact.risk}

${insight.actionPlan && insight.actionPlan.length > 0 ? '‚ö†Ô∏è **L∆∞u √Ω:** Insight n√†y c√≥ k·∫ø ho·∫°ch h√†nh ƒë·ªông c·ª• th·ªÉ ƒë·ªÉ t·ªëi ∆∞u h√≥a hi·ªáu su·∫•t.' : '‚úÖ **Tr·∫°ng th√°i:** M·ªçi th·ª© ƒëang di·ªÖn ra t·ªët, ti·∫øp t·ª•c theo d√µi.'}
      `.trim();
    }

    return `
This insight was generated through analysis of your ${taskCount} current tasks and historical data patterns.

üîç **Analysis Process:**
1. Data collection from ${insight.aiAnalysis.dataPoints.length} different sources
2. Machine learning pattern recognition algorithms
3. Comparison with historical data and industry benchmarks  
4. Confidence calculation based on data quality (${(dataQuality * 100).toFixed(0)}%)

üí° **Result:** ${insight.insight}

üìä **Expected Impact:** Financial: ${insight.impact.financial}%, Time: ${insight.impact.time}%, Risk: ${insight.impact.risk}

${insight.actionPlan && insight.actionPlan.length > 0 ? '‚ö†Ô∏è **Note:** This insight includes a specific action plan to optimize performance.' : '‚úÖ **Status:** Everything is progressing well, continue monitoring.'}
    `.trim();
  }

  /**
   * Extract key factors influencing the insight
   */
  private static extractKeyFactors(
    insight: AIBusinessInsight,
    context: PredictionContext,
    language: 'en' | 'vi'
  ): AIExplanation['keyFactors'] {
    const factors = [];

    // Data quality factor
    factors.push({
      factor: language === 'vi' ? 'Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu' : 'Data Quality',
      weight: context.contextMetadata.dataQuality,
      description: language === 'vi' 
        ? `D·ªØ li·ªáu c√≥ ƒë·ªô tin c·∫≠y ${(context.contextMetadata.dataQuality * 100).toFixed(0)}%`
        : `Data reliability at ${(context.contextMetadata.dataQuality * 100).toFixed(0)}%`,
      evidence: insight.aiAnalysis.dataPoints
    });

    // Task volume factor
    const taskVolume = context.currentState.activeTasks.length / 10; // Normalize to 0-1
    factors.push({
      factor: language === 'vi' ? 'Kh·ªëi l∆∞·ª£ng c√¥ng vi·ªác' : 'Task Volume',
      weight: Math.min(taskVolume, 1),
      description: language === 'vi'
        ? `${context.currentState.activeTasks.length} tasks ƒëang ho·∫°t ƒë·ªông`
        : `${context.currentState.activeTasks.length} active tasks`,
      evidence: [language === 'vi' ? 'Ph√¢n t√≠ch workload hi·ªán t·∫°i' : 'Current workload analysis']
    });

    // Historical performance factor
    const historyWeight = context.historicalPerformance.productivity.weekOverWeekGrowth > 0 ? 0.8 : 0.4;
    factors.push({
      factor: language === 'vi' ? 'Hi·ªáu su·∫•t l·ªãch s·ª≠' : 'Historical Performance',
      weight: historyWeight,
      description: language === 'vi'
        ? `TƒÉng tr∆∞·ªüng ${context.historicalPerformance.productivity.weekOverWeekGrowth}% so v·ªõi tu·∫ßn tr∆∞·ªõc`
        : `${context.historicalPerformance.productivity.weekOverWeekGrowth}% growth from last week`,
      evidence: [language === 'vi' ? 'D·ªØ li·ªáu performance tracking' : 'Performance tracking data']
    });

    return factors.sort((a, b) => b.weight - a.weight).slice(0, 5);
  }

  /**
   * Calculate confidence breakdown
   */
  private static calculateConfidenceBreakdown(
    insight: AIBusinessInsight,
    context: PredictionContext
  ): AIExplanation['confidenceBreakdown'] {
    const dataQuality = context.contextMetadata.dataQuality;
    const patternStrength = insight.impact.confidence;
    const historicalAccuracy = 0.75; // Default based on model performance
    const contextRelevance = context.contextMetadata.analysisDepth === 'comprehensive' ? 0.9 : 0.7;
    
    const overall = (dataQuality + patternStrength + historicalAccuracy + contextRelevance) / 4;

    return {
      dataQuality,
      patternStrength,
      historicalAccuracy,
      contextRelevance,
      overall
    };
  }

  /**
   * Describe methodology used
   */
  private static describeMethodology(
    insight: AIBusinessInsight,
    context: PredictionContext,
    language: 'en' | 'vi'
  ): AIExplanation['methodology'] {
    if (language === 'vi') {
      return {
        analysisType: 'Ph√¢n t√≠ch Business Intelligence v·ªõi Machine Learning',
        dataPoints: [
          `${context.currentState.activeTasks.length} tasks hi·ªán t·∫°i`,
          `${Object.keys(context.clientRelationships.relationshipHealth).length} m·ªëi quan h·ªá kh√°ch h√†ng`,
          'D·ªØ li·ªáu performance l·ªãch s·ª≠',
          'Patterns h·ªçc t·ª´ user behavior'
        ],
        algorithms: [
          'Pattern Recognition',
          'Trend Analysis',
          'Contextual Reasoning',
          'Confidence Scoring'
        ],
        assumptions: [
          'D·ªØ li·ªáu hi·ªán t·∫°i ph·∫£n √°nh xu h∆∞·ªõng t∆∞∆°ng lai',
          'User patterns ·ªïn ƒë·ªãnh trong ng·∫Øn h·∫°n',
          'External factors kh√¥ng thay ƒë·ªïi ƒë·ªôt ng·ªôt'
        ]
      };
    }

    return {
      analysisType: 'Business Intelligence Analysis with Machine Learning',
      dataPoints: [
        `${context.currentState.activeTasks.length} current tasks`,
        `${Object.keys(context.clientRelationships.relationshipHealth).length} client relationships`,
        'Historical performance data',
        'User behavior patterns'
      ],
      algorithms: [
        'Pattern Recognition',
        'Trend Analysis', 
        'Contextual Reasoning',
        'Confidence Scoring'
      ],
      assumptions: [
        'Current data reflects future trends',
        'User patterns remain stable short-term',
        'External factors remain consistent'
      ]
    };
  }

  /**
   * Identify analysis limitations
   */
  private static identifyLimitations(
    insight: AIBusinessInsight,
    context: PredictionContext,
    language: 'en' | 'vi'
  ): string[] {
    const limitations = [];

    if (context.contextMetadata.dataQuality < 0.7) {
      limitations.push(
        language === 'vi' 
          ? 'Ch·∫•t l∆∞·ª£ng d·ªØ li·ªáu c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn ƒë·ªô ch√≠nh x√°c'
          : 'Data quality may affect accuracy'
      );
    }

    if (context.currentState.activeTasks.length < 5) {
      limitations.push(
        language === 'vi'
          ? 'S·ªë l∆∞·ª£ng tasks √≠t c√≥ th·ªÉ h·∫°n ch·∫ø kh·∫£ nƒÉng ph√¢n t√≠ch patterns'
          : 'Limited task volume may restrict pattern analysis'
      );
    }

    limitations.push(
      language === 'vi'
        ? 'Predictions d·ª±a tr√™n d·ªØ li·ªáu hi·ªán t·∫°i, c√≥ th·ªÉ thay ƒë·ªïi theo th·ªùi gian'
        : 'Predictions based on current data, may change over time'
    );

    limitations.push(
      language === 'vi'
        ? 'External factors (th·ªã tr∆∞·ªùng, kh√°ch h√†ng) kh√¥ng ƒë∆∞·ª£c t√≠nh to√°n ƒë·∫ßy ƒë·ªß'
        : 'External factors (market, clients) not fully calculated'
    );

    return limitations;
  }

  /**
   * Generate alternative scenarios
   */
  private static generateAlternativeScenarios(
    insight: AIBusinessInsight,
    language: 'en' | 'vi'
  ): AIExplanation['alternativeScenarios'] {
    const scenarios = [];

    if (insight.impact.financial > 10 || insight.impact.time > 15) {
      scenarios.push({
        scenario: language === 'vi' ? 'K·ªãch b·∫£n t√≠ch c·ª±c' : 'Optimistic Scenario',
        probability: 0.3,
        impact: language === 'vi' 
          ? 'Hi·ªáu su·∫•t tƒÉng 20-30% n·∫øu √°p d·ª•ng ƒë·∫ßy ƒë·ªß c√°c ƒë·ªÅ xu·∫•t'
          : 'Performance increases 20-30% with full recommendation implementation'
      });

      scenarios.push({
        scenario: language === 'vi' ? 'K·ªãch b·∫£n trung t√≠nh' : 'Neutral Scenario', 
        probability: 0.5,
        impact: language === 'vi'
          ? 'Duy tr√¨ hi·ªáu su·∫•t hi·ªán t·∫°i v·ªõi c·∫£i thi·ªán nh·ªè'
          : 'Maintain current performance with minor improvements'
      });

      scenarios.push({
        scenario: language === 'vi' ? 'K·ªãch b·∫£n ti√™u c·ª±c' : 'Pessimistic Scenario',
        probability: 0.2,
        impact: language === 'vi'
          ? 'Hi·ªáu su·∫•t c√≥ th·ªÉ gi·∫£m n·∫øu kh√¥ng c√≥ h√†nh ƒë·ªông'
          : 'Performance may decline without action'
      });
    }

    return scenarios;
  }

  /**
   * Generate actionable steps
   */
  private static generateActionableSteps(
    insight: AIBusinessInsight,
    language: 'en' | 'vi'
  ): AIExplanation['userActions'] {
    return insight.actionPlan.map((action, index) => ({
      action: action.step,
      difficulty: index === 0 ? 'low' : index === 1 ? 'medium' : 'high',
      timeEstimate: action.timeline || (index === 0 ? '5-10 ph√∫t' : index === 1 ? '30-60 ph√∫t' : '2-4 gi·ªù'),
      expectedImpact: language === 'vi' 
        ? `C·∫£i thi·ªán ${insight.category} t·ª´ 10-${(index + 1) * 20}%`
        : `Improve ${insight.category} by 10-${(index + 1) * 20}%`
    }));
  }

  /**
   * Find related insights
   */
  private static findRelatedInsights(
    insight: AIBusinessInsight,
    context: PredictionContext
  ): string[] {
    // This would typically search through a database of insights
    // For now, return related categories
    const related = [];
    
    if (insight.category === 'opportunity') {
      related.push('growth', 'optimization');
    } else if (insight.category === 'risk') {
      related.push('optimization', 'growth');
    }

    return related;
  }

  // Prediction-specific methods would follow similar patterns...
  private static generatePredictionSummary(prediction: AITaskPrediction, language: 'en' | 'vi'): string {
    if (language === 'vi') {
      return `AI d·ª± ƒëo√°n task s·∫Ω ho√†n th√†nh v√†o ${new Date(prediction.estimatedCompletion.realistic).toLocaleDateString('vi-VN')} v·ªõi ƒë·ªô tin c·∫≠y ${(prediction.estimatedCompletion.confidence * 100).toFixed(0)}%.`;
    }
    return `AI predicts task completion on ${new Date(prediction.estimatedCompletion.realistic).toLocaleDateString()} with ${(prediction.estimatedCompletion.confidence * 100).toFixed(0)}% confidence.`;
  }

  private static generateDetailedPredictionExplanation(prediction: AITaskPrediction, context: PredictionContext, language: 'en' | 'vi'): string {
    // Implementation similar to insight explanation
    return language === 'vi' ? 'Chi ti·∫øt d·ª± ƒëo√°n...' : 'Detailed prediction...';
  }

  private static extractPredictionFactors(prediction: AITaskPrediction, context: PredictionContext, language: 'en' | 'vi'): AIExplanation['keyFactors'] {
    // Implementation similar to insight factors
    return [];
  }

  private static calculatePredictionConfidenceBreakdown(prediction: AITaskPrediction, context: PredictionContext): AIExplanation['confidenceBreakdown'] {
    // Implementation similar to insight confidence
    return {
      dataQuality: 0.8,
      patternStrength: prediction.estimatedCompletion.confidence,
      historicalAccuracy: 0.75,
      contextRelevance: 0.8,
      overall: prediction.estimatedCompletion.confidence
    };
  }

  private static describePredictionMethodology(prediction: AITaskPrediction, context: PredictionContext, language: 'en' | 'vi'): AIExplanation['methodology'] {
    // Implementation similar to insight methodology
    return {
      analysisType: language === 'vi' ? 'D·ª± ƒëo√°n Task v·ªõi Machine Learning' : 'Task Prediction with Machine Learning',
      dataPoints: [],
      algorithms: [],
      assumptions: []
    };
  }

  private static identifyPredictionLimitations(prediction: AITaskPrediction, context: PredictionContext, language: 'en' | 'vi'): string[] {
    // Implementation similar to insight limitations
    return [];
  }

  private static generatePredictionScenarios(prediction: AITaskPrediction, language: 'en' | 'vi'): AIExplanation['alternativeScenarios'] {
    // Implementation similar to insight scenarios
    return [];
  }

  private static generatePredictionActions(prediction: AITaskPrediction, language: 'en' | 'vi'): AIExplanation['userActions'] {
    // Implementation similar to insight actions
    return [];
  }
}
